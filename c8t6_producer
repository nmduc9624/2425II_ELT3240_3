#include "stm32f1xx.h"
#include <stdint.h>
#include <stdio.h>
#include <math.h>

void delay_ms(uint32_t ms) {
    for (volatile uint32_t i = 0; i < ms * 1000; i++) __NOP();
}

#define N_SAMPLES 20
#define LCD_ADDR (0x27 << 1)

void i2c_init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
    GPIOB->CRL &= ~((0xF << 24) | (0xF << 28));
    GPIOB->CRL |=  ((0xB << 24) | (0xB << 28));  
    I2C1->CR2 = 8;
    I2C1->CCR = 40;
    I2C1->TRISE = 9;
    I2C1->CR1 |= I2C_CR1_PE;
}

void i2c_start(void) {
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB));
    (void)I2C1->SR1;
}

void i2c_write(uint8_t addr) {
    I2C1->DR = addr;
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
    (void)I2C1->SR2;
}

void i2c_send_data(uint8_t data) {
    while (!(I2C1->SR1 & I2C_SR1_TXE));
    I2C1->DR = data;
    while (!(I2C1->SR1 & I2C_SR1_BTF));
}

void i2c_stop(void) {
    I2C1->CR1 |= I2C_CR1_STOP;
}

void lcd_send(uint8_t data, uint8_t mode) {
    uint8_t high = data & 0xF0;
    uint8_t low  = (data << 4) & 0xF0;
    uint8_t bl = 0x08, en = 0x04;

    uint8_t seq[4] = {
        high | mode | bl | en,
        high | mode | bl,
        low  | mode | bl | en,
        low  | mode | bl
    };

    i2c_start();
    i2c_write(LCD_ADDR);
    for (int i = 0; i < 4; i++)
        i2c_send_data(seq[i]);
    i2c_stop();
}

void lcd_cmd(uint8_t cmd) { lcd_send(cmd, 0); }
void lcd_data(uint8_t d)  { lcd_send(d, 1); }

void lcd_clear(void) {
    lcd_cmd(0x01);
    delay_ms(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col) {
    lcd_cmd((row == 0 ? 0x80 : 0xC0) + col);
}

void lcd_print(char* str) {
    while (*str) lcd_data(*str++);
}

void lcd_init(void) {
    i2c_init();
    delay_ms(50);
    lcd_cmd(0x33);
    lcd_cmd(0x32);
    lcd_cmd(0x28);
    lcd_cmd(0x0C);
    lcd_cmd(0x06);
    lcd_clear();
}

void adc_init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_ADC1EN;
    GPIOA->CRL &= ~(0xF << 0); 
    ADC1->CR2 |= ADC_CR2_ADON;
    delay_ms(1);
    ADC1->CR2 |= ADC_CR2_ADON;
}

uint16_t adc_read(void) {
    ADC1->SQR3 = 0;
    ADC1->CR2 |= ADC_CR2_ADON;
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return ADC1->DR;
}

volatile uint8_t system_on = 1;
volatile uint8_t uart_index = 0;
char uart_buffer[4];
volatile uint8_t current_state = '0';

void uart1_init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;

    GPIOA->CRH &= ~((0xF << 4) | (0xF << 8));
    GPIOA->CRH |=  ((0xB << 4) | (0x4 << 8));  

    USART1->BRR = 8000000 / 9600;
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;

    NVIC_EnableIRQ(USART1_IRQn);
}

void uart1_send_char(char c) {
    while (!(USART1->SR & USART_SR_TXE));
    USART1->DR = c;
}

void USART1_IRQHandler(void) {
    if (USART1->SR & USART_SR_RXNE) {
        char c = USART1->DR;
        if (c == '\n' || uart_index >= 3) {
            uart_buffer[uart_index] = '\0';
            uart_index = 0;

            if (uart_buffer[0] == 'I') {
                system_on = 1;
                uart1_send_char(current_state);
            } else if (uart_buffer[0] == 'O') {
                system_on = 0;
            }
        } else {
            uart_buffer[uart_index++] = c;
        }
    }
}

void uart2_init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;

    GPIOA->CRL &= ~(0xF << (2 * 4));
    GPIOA->CRL |=  (0xB << (2 * 4));

    USART2->BRR = 8000000 / 9600;
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;
}

void uart2_send_char(char c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void uart2_send_string(char* str) {
    while (*str) uart2_send_char(*str++);
}

float measure_ppm_fast() {
    float rs_vals[N_SAMPLES];
    float sum = 0;

    float R0 = 9.56;
    float RL = 500;

    for (int i = 0; i < N_SAMPLES; i++) {
        uint16_t adc = adc_read();
        float Vout = adc * 5.0f / 1023.0f;
        float Rs = RL * (5.0f - Vout) / Vout;
        rs_vals[i] = Rs;
        sum += Rs;
        delay_ms(10);  
    }

    float mean = sum / N_SAMPLES;
    float std = 0;
    for (int i = 0; i < N_SAMPLES; i++) {
        std += (rs_vals[i] - mean) * (rs_vals[i] - mean);
    }
    std = sqrtf(std / N_SAMPLES);

    float valid[N_SAMPLES];
    int valid_n = 0;
    for (int i = 0; i < N_SAMPLES; i++) {
        if (fabsf(rs_vals[i] - mean) <= 3.0f * std) {
            valid[valid_n++] = rs_vals[i];
        }
    }

    for (int i = 0; i < valid_n - 1; i++) {
        for (int j = i + 1; j < valid_n; j++) {
            if (valid[i] > valid[j]) {
                float t = valid[i];
                valid[i] = valid[j];
                valid[j] = t;
            }
        }
    }

    float Rs_median = valid_n > 0 ? valid[valid_n / 2] : mean;
    float ratio = Rs_median / R0;
    float ppm = powf(10.0f, (log10f(ratio) - 1.51f) / -0.54f);

    return ppm;
}

int main(void) {
    char buf[32];
    uint8_t current_state = 0;

    adc_init();
    lcd_init();
    uart1_init();   
    uart2_init();   

    uint8_t last_state = 0xFF;

    while (1) {
        lcd_clear();
        lcd_set_cursor(0, 0);

        if (system_on) {
            float final_ppm = measure_ppm_fast();

            sprintf(buf, "Gas PPM = %4d", (int)final_ppm);

            uart2_send_string(buf);
            lcd_print(buf);

            lcd_set_cursor(1, 0);

            if (final_ppm >= 200 && final_ppm < 300) {
                current_state = '1';
                lcd_print("SysS: 1 EnvS = 1");
            } else if (final_ppm >= 300 && final_ppm < 500) {
                current_state = '2';
                lcd_print("SysS: 1 EnvS = 2");
            } else if (final_ppm >= 500) {
                current_state = '3';
                lcd_print("SysS: 1 EnvS = 3");
            } else {
                current_state = '0';
                lcd_print("SysS: 1 EnvS = 0");
            }

            if (current_state != last_state) {
                uart1_send_char(current_state);
                last_state = current_state;
            }
        } else {
            lcd_set_cursor(1, 0);
            lcd_print("SysS: 0");
            last_state = 0xFF;
        }

        delay_ms(1000);
    }
}
